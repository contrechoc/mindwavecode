//work in progress for: http://interactionstation.wdka.hro.nl/wiki/Mindwave#Connecting_Bluetooth_to_BlueSMiRF

//Arduino with TFT screen, showing some data coming from the Mindwave head set

//code hacked from https://learn.sparkfun.com/tutorials/hackers-in-residence---hacking-mindwave-mobile?_ga=2.146391420.932859955.1588796476-1975814699.1588796476#configuring-the-bluetooth-module

///////////////////////////////////////////////////////////////
// Arduino Bluetooth Interface with Mindwave
// Sophi Kravitz edit 11-4
// Shane Clements edit 11-5
////////////////////////////////////////////////////////////////////////

#include <TFT.h>  // Arduino LCD library
#include <SPI.h>

// pin definition for the Uno
#define cs   10
#define dc   9
#define rst  8

// pin definition for the Leonardo
// #define cs   7
// #define dc   0
// #define rst  1

// create an instance of the library
TFT TFTscreen = TFT(cs, dc, rst);

// char array to print to the screen
char sensorPrintout[4];

int BAUDRATE = 57600;

// checksum variables
byte payloadChecksum = 0;
byte CalculatedChecksum;
byte checksum = 0;              //data type byte stores an 8-bit unsigned number, from 0 to 255
int payloadLength = 0;
byte payloadData[64] = {0};
byte poorQuality = 0;
byte attention = 0;
byte meditation = 0;

// system variables
long lastReceivedPacket = 0;
boolean bigPacket = false;
boolean brainwave = false;

long timer;
int lineNumber = 0;

void setup() {
  pinMode(14, OUTPUT);
  pinMode(15, OUTPUT);
  pinMode(16, OUTPUT);
  pinMode(17, OUTPUT);

  digitalWrite(14, LOW);
  digitalWrite(17, LOW);

  digitalWrite(15, HIGH);   // hello sequence
  delay(100);
  digitalWrite(15, LOW);
  delay(100);
  digitalWrite(15, HIGH);   // hello sequence
  delay(100);
  digitalWrite(15, LOW);
  delay(100);
  digitalWrite(15, HIGH);   // hello sequence
  delay(100);
  digitalWrite(15, LOW);
  delay(100);

  Serial.begin(57600);       // Bluetooth

  pinMode(6, OUTPUT);
  digitalWrite(6, HIGH);

  // Put this line at the beginning of every sketch that uses the GLCD:
  TFTscreen.begin();

  startTFT();

}
byte ReadOneByte() {
  int ByteRead;
  // Wait until there is data
  while (!Serial.available());
  //Get the number of bytes (characters) available for reading from the serial port.
  //This is data that's already arrived and stored in the serial receive buffer (which holds 64 bytes)
  ByteRead = Serial.read();
  return ByteRead; // read incoming serial data
}

unsigned int delta_wave = 0;
unsigned int theta_wave = 0;
unsigned int low_alpha_wave = 0;
unsigned int high_alpha_wave = 0;
unsigned int low_beta_wave = 0;
unsigned int high_beta_wave = 0;
unsigned int low_gamma_wave = 0;
unsigned int mid_gamma_wave = 0;

void read_waves(int i) {
  delta_wave = read_3byte_int(i);
  i += 3;
  theta_wave = read_3byte_int(i);
  i += 3;
  low_alpha_wave = read_3byte_int(i);
  i += 3;
  high_alpha_wave = read_3byte_int(i);
  i += 3;
  low_beta_wave = read_3byte_int(i);
  i += 3;
  high_beta_wave = read_3byte_int(i);
  i += 3;
  low_gamma_wave = read_3byte_int(i);
  i += 3;
  mid_gamma_wave = read_3byte_int(i);
}

int read_3byte_int(int i) {
  return ((payloadData[i] << 16) + (payloadData[i + 1] << 8) + payloadData[i + 2]);
}

void loop() {


  /*
      // Read the value of the sensor on A0
      String sensorVal = String(attention);

      // convert the reading to a char array
      sensorVal.toCharArray(sensorPrintout, 4);

      // set the font color
      TFTscreen.stroke(255, 255, 255);
      // print the sensor value
      TFTscreen.text(sensorPrintout, 0, 20);
  */




  // Look for sync bytes
  // Byte order: 0xAA, 0xAA, payloadLength, payloadData,
  // Checksum (sum all the bytes of payload, take lowest 8 bits, then bit inverse on lowest
  if (ReadOneByte() == 0xAA) {
    /*
        // set the font color
        TFTscreen.stroke(255, 255, 255);
        // print the sensor value
        TFTscreen.text("first", 0, 50);

        // erase the text you just wrote
        TFTscreen.stroke(0, 0, 0);
        TFTscreen.text("first", 0, 50);
    */

    if (ReadOneByte() == 0xAA) {

      /*
            // set the font color
            TFTscreen.stroke(255, 255, 255);
            // print the sensor value
            TFTscreen.text("second", 0, 70);

            // erase the text you just wrote
            TFTscreen.stroke(0, 0, 0);
            TFTscreen.text("second", 0, 70);
      */

      payloadLength = ReadOneByte();
      if (payloadLength > 169) //Payload length can not be greater than 169
        return;
      payloadChecksum = 0;
      for (int i = 0; i < payloadLength; i++) {     //loop until payload length is complete
        payloadData[i] = ReadOneByte();             //Read payload
        payloadChecksum += payloadData[i];
      }
      checksum = ReadOneByte();                     //Read checksum byte from stream
      payloadChecksum = 255 - payloadChecksum;      //Take oneâ€™s compliment of generated checksum
      if (checksum == payloadChecksum) {
        poorQuality = 200;
        attention = 0;
        meditation = 0;
      }
      brainwave = false;
      for (int i = 0; i < payloadLength; i++) { // Parse the payload
        switch (payloadData[i]) {
          case 02:
            i++;
            poorQuality = payloadData[i];
            bigPacket = true;
            break;
          case 04:
            i++;
            attention = payloadData[i];
            break;
          case 05:
            i++;
            meditation = payloadData[i];
            break;
          case 0x80:
            i = i + 3;
            break;
          case 0x83:                         // ASIC EEG POWER INT
            i++;
            brainwave = true;
            byte vlen = payloadData[i];
            //mySerial.print(vlen, DEC);
            //mySerial.println();
            read_waves(i + 1);
            i += vlen; // i = i + vlen
            break;
        }                                 // switch
      }                                   // for loop

      if (bigPacket) {
        if (poorQuality == 0) {

        }
        else {                            // do nothing

        }
      }


      if (brainwave && attention > 0 && attention < 100) {
        digitalWrite(15, HIGH);
        /*
                mySerial.print("Attention value is: ");
                mySerial.print(attention, DEC);
                mySerial.println();
                mySerial.print("Delta value is: ");
                mySerial.print(delta_wave, DEC);
                mySerial.println();
                mySerial.print("Theta value is: ");
                mySerial.print(theta_wave, DEC);
                mySerial.println();
                mySerial.print("Low Alpha value is: ");
                mySerial.print(low_alpha_wave, DEC);
                mySerial.println();
                mySerial.print("High Alpha value is: ");
                mySerial.print(high_alpha_wave, DEC);
                mySerial.println();
                mySerial.print("Alertness value1 is: ");
                mySerial.print(low_beta_wave, DEC);
                mySerial.println();
                mySerial.print("Alertness value2 is: ");
                mySerial.print(high_beta_wave, DEC);
                mySerial.println();
                mySerial.print(low_gamma_wave, DEC);
                mySerial.println();
                mySerial.print(mid_gamma_wave, DEC);
                mySerial.println();
        */

      }
      else
      {
        digitalWrite(15, LOW);
      }

      if (attention > 40)
      {
        digitalWrite(16, HIGH);
        // Read the value of the sensor on A0
        String sensorVal = String(attention);

        // convert the reading to a char array
        sensorVal.toCharArray(sensorPrintout, 4);

        // print the sensor value
        TFTscreen.text(sensorPrintout, 0, 20 + lineNumber * 10);

        sensorVal = String(delta_wave);

        // convert the reading to a char array
        sensorVal.toCharArray(sensorPrintout, 4);

        // print the sensor value
        TFTscreen.text(sensorPrintout, 25, 20 + lineNumber * 10);

        sensorVal = String(theta_wave);

        // convert the reading to a char array
        sensorVal.toCharArray(sensorPrintout, 4);

        // print the sensor value
        TFTscreen.text(sensorPrintout, 50, 20 + lineNumber * 10);

        sensorVal = String(low_alpha_wave);

        // convert the reading to a char array
        sensorVal.toCharArray(sensorPrintout, 4);

        // print the sensor value
        TFTscreen.text(sensorPrintout, 75, 20 + lineNumber * 10);

        sensorVal = String(high_alpha_wave);

        // convert the reading to a char array
        sensorVal.toCharArray(sensorPrintout, 4);

        // print the sensor value
        TFTscreen.text(sensorPrintout, 100, 20 + lineNumber * 10);

        lineNumber++;
        if ( lineNumber > 12 )
        {
          startTFT();
          lineNumber = 0;
        }
      }

      else
        digitalWrite(16, LOW);
    }
  }
}

void startTFT() {
  // Put this line at the beginning of every sketch that uses the GLCD:
  TFTscreen.begin();

  // clear the screen with a black background
  TFTscreen.background(0, 0, 0);

  // write the static text to the screen
  // set the font color to white
  TFTscreen.stroke(255, 255, 255);
  // set the font size
  TFTscreen.setTextSize(1);
  // write the text to the top left corner of the screen
  TFTscreen.text("Attention Values :\n ", 0, 0);
  // ste the font size very large for the loop
  //TFTscreen.setTextSize(5);
}
